{"version":3,"file":"static/js/228.30443155.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","const ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '40%', height: '100%', objectFit: 'contain', margin: \"0 auto\"}} src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({\r\n        name: '',\r\n        description: '',\r\n        thumbnail: null,\r\n        homepage: null,\r\n        wiki: null        \r\n    })\r\n\r\n    const {getCharacters, clearError, process, setProcess} = useMarvelService();\r\n\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n\r\n    const updateChar = () => {\r\n        setProcess('loading');\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacters(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 15000);\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}   \r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\"\r\n                    onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    const img = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n    const charDescr = description.length <= 200 ? description : (description.substring(0, 200) + '...')\r\n\r\n    return (\r\n        <div className = \"randomchar__block\">\r\n            <img src={thumbnail} style={thumbnail === img ? {objectFit: 'unset'} : {}} alt=\"Random character\" className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {charDescr || 'Data not found'}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    const onCharListLoaded = (newData) => {\r\n        let ended = false;\r\n        if (newData.length < 9) ended = true;\r\n\r\n        setData([...data, ...newData]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const loadCharList = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        initial ? setProcess('loading') : setProcess('confirmed');\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCharList(offset, true);\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    const renderChars = (chars) => {\r\n        const img = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n        const elements = chars.map(item => {\r\n            return (\r\n                <CSSTransition key={item.id} timeout={300} classNames=\"char__item\">\r\n                    <li className=\"char__item\" \r\n                        onClick={() => {\r\n                            props.onCharSelect(item.id);\r\n                            window.scrollTo(0, 400);\r\n                        }}\r\n                        tabIndex={0}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === 'Enter') props.onCharSelect(item.id) \r\n                        }}>\r\n                        <img src={item.thumbnail} style={item.thumbnail === img ? {objectFit: 'unset'} : {}} alt=\"abyss\"/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li> \r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                   {elements} \r\n                </TransitionGroup>\r\n                \r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = useMemo(() => {\r\n        return setContent(process, () => renderChars(data))\r\n        //eslint-disable-next-line\r\n    }, [process, data])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {items}\r\n            <button className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{display: charEnded ? \"none\" : 'block'}}\r\n                onClick={() => loadCharList(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelect: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import {useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacters, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        //eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) return;\r\n        setProcess('loading');\r\n        clearError();\r\n        getCharacters(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (charId) => {\r\n        setChar(charId);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    const comicsList = comics.slice(0, 10).map((item, i) => {\r\n        return (\r\n            <li className=\"char__comics-item\" key={i}>\r\n                <Link to={`/comics/${+item.resourceURI.substring(43)}`}>\r\n                  {item.name}  \r\n                </Link>\r\n                \r\n            </li>\r\n        )\r\n    });\r\n    const img = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} style={thumbnail === img ? {objectFit: 'unset'} : {}} alt={name}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? comicsList : \"Data not found\"}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharactersByName, clearError, process, setProcess} = useMarvelService();\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        setChar(null);\r\n        getCharactersByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n    const charDescr = (!char || char.length === 0) ? null : char[0].description.length <= 200 ? char[0].description : (char[0].description.substring(0, 200) + '...')\r\n    const result = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        {/* <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div> */}\r\n                        <img src={char[0].thumbnail} style={{objectFit: 'unset'}} alt=\"Random character\" className=\"char__search-img\"/>\r\n                        <div className = \"char__search-info\" >\r\n                            <h2 className = \"char__search-name\">{char[0].name}</h2>\r\n                            <p className = \"char__search-descr\">{charDescr || \"Data not found\"}</p>\r\n                        </div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    const errorMessage = process === 'error' ? <div className = \"char__search-critical-error\">Data not found</div> : null;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string()\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}>\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {result}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelect = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>                      \r\n                    <ErrorBoundary>\r\n                        <CharList onCharSelect={onCharSelect}/>\r\n                    </ErrorBoundary>            \r\n                </div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d535af7cd6b64bc0cd6e2e98346439c0';\r\n    const _baseOffset = 210;\r\n    const _baseLimit = 8;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(char => _transformCharacter(char))\r\n    }\r\n\r\n    const getCharactersByName = async (name = null) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(char => _transformCharacter(char))\r\n    }\r\n\r\n    const getCharacters = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseLimit) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(comics => _transformComics(comics))\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            language: comics.textObjects.language || 'en-us',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.`: 'No information about the number of pages',\r\n            price: comics.prices.price ? (comics.prices.price + '$') : \"NOT AVAILABLE\"\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, getCharacters, getCharactersByName, clearError, process, setProcess, getAllComics, getComics}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setProcess(\"loading\"), [])\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case \"loading\":\r\n            return <Spinner/>;\r\n        case \"confirmed\":\r\n            return <Component data={data}/>;\r\n        case \"error\":\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error ('Unexpected error');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorBoundary","state","error","errorInfo","console","log","this","setState","props","children","Component","style","display","width","height","objectFit","margin","src","alt","View","data","name","description","thumbnail","homepage","wiki","charDescr","length","substring","className","href","useState","char","setChar","useMarvelService","getCharacters","clearError","process","setProcess","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","timerId","setInterval","clearInterval","setContent","onClick","mjolnir","setData","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onCharListLoaded","newData","ended","loadCharList","initial","items","useMemo","chars","elements","map","item","CSSTransition","timeout","classNames","onCharSelect","window","scrollTo","tabIndex","onKeyDown","e","key","TransitionGroup","component","renderChars","disabled","comics","comicsList","slice","i","to","resourceURI","charId","getCharactersByName","result","errorMessage","initialValues","charName","validationSchema","Yup","onSubmit","htmlFor","type","placeholder","selectedChar","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","res","results","_transformCharacter","getAllComics","_transformComics","getComics","path","extension","urls","title","language","textObjects","pageCount","price","prices","Spinner","ErrorMessage"],"sourceRoot":""}